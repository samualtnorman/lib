root: true
overrides: [ files: [ "**/*.js", "**/*.ts" ] ]
parser: "@typescript-eslint/parser"
parserOptions: { project: [ ./tsconfig.json, ./src/tsconfig.json] }
plugins: [ "@typescript-eslint", unicorn, eslint-comments, array-func, regexp ]
ignorePatterns: [ node_modules, dist, index.cjs ]

extends:
- eslint:recommended
- plugin:@typescript-eslint/recommended
- plugin:unicorn/recommended
- plugin:eslint-comments/recommended
- plugin:array-func/recommended
- plugin:regexp/recommended

rules:
  no-undef: off
  no-inner-declarations: off
  no-await-in-loop: warn
  no-unmodified-loop-condition: warn
  no-unused-private-class-members: warn
  class-methods-use-this: warn
  default-case-last: warn
  no-else-return: warn
  no-extra-bind: warn
  no-extra-boolean-cast: warn
  no-extra-label: warn
  no-floating-decimal: warn
  no-implicit-coercion: warn
  no-lonely-if: warn
  no-mixed-operators: warn
  no-multi-assign: warn
  no-negated-condition: warn
  no-new: warn
  no-new-object: warn
  no-new-wrappers: warn
  no-return-await: warn
  no-sequences: warn
  no-unneeded-ternary: warn
  no-useless-call: warn
  no-useless-computed-key: warn
  no-useless-concat: warn
  no-useless-rename: warn
  no-useless-return: warn
  operator-assignment: warn
  prefer-arrow-callback: warn
  prefer-exponentiation-operator: warn
  prefer-named-capture-group: warn
  prefer-numeric-literals: warn
  prefer-object-spread: warn
  prefer-promise-reject-errors: warn
  prefer-regex-literals: warn
  prefer-rest-params: warn
  prefer-spread: warn
  prefer-template: warn
  radix: warn
  yoda: warn
  arrow-spacing: warn
  comma-style: warn
  computed-property-spacing: warn
  eol-last: warn
  key-spacing: warn
  linebreak-style: warn
  no-multi-spaces: warn
  no-whitespace-before-property: warn
  semi-spacing: warn
  space-before-blocks: warn
  space-in-parens: warn
  space-unary-ops: warn
  switch-colon-spacing: warn
  template-curly-spacing: warn
  template-tag-spacing: warn
  unicode-bom: warn
  wrap-iife: warn
  yield-star-spacing: warn
  no-constant-condition: [ warn, checkLoops: false ]
  no-empty: [ warn, allowEmptyCatch: true ]
  curly: [ warn, multi-or-nest ]
  prefer-const: [ warn, destructuring: all ]
  camelcase: [ warn, properties: never ]
  consistent-this: [ warn, self ]
  func-style: [ warn, declaration, allowArrowFunctions: true ]
  grouped-accessor-pairs: [ warn, getBeforeSet ]
  semi-style: [ warn, last ]
  one-var: [ warn, never ]
  quote-props: [ warn, as-needed ]
  array-bracket-spacing: [ warn, always ]
  arrow-parens: [ warn, as-needed ]
  dot-location: [ warn, property ]
  generator-star-spacing: [ warn, { before: false, after: true, method: neither } ]
  no-multiple-empty-lines: [ warn, max: 1 ]
  nonblock-statement-body-position: [ warn, below ]
  object-curly-newline: [ warn, multiline: true ]
  object-property-newline: [ warn, allowAllPropertiesOnSameLine: true ]
  operator-linebreak: warn
  padded-blocks: [ warn, never ]
  rest-spread-spacing: [ warn, never ]
  no-unreachable-loop: error

  unicorn/prefer-node-protocol: off
  unicorn/import-style: off
  unicorn/prefer-number-properties: off
  unicorn/explicit-length-check: off
  unicorn/no-await-expression-member: off
  unicorn/filename-case: off
  unicorn/prefer-code-point: off
  unicorn/no-new-array: off
  unicorn/switch-case-braces: off
  unicorn/no-useless-undefined: off
  unicorn/prefer-top-level-await: off
  unicorn/no-null: warn
  unicorn/no-unused-properties: warn
  unicorn/empty-brace-spaces: warn
  unicorn/no-lonely-if: warn
  unicorn/better-regex: [ warn, sortCharacterClasses: false ]
  unicorn/prevent-abbreviations: [ warn, { checkFilenames: false, allowList: { args: true, Args: true, db: true } } ]
  unicorn/prefer-ternary: warn
  unicorn/no-array-reduce: off

  eslint-comments/disable-enable-pair: off
  eslint-comments/no-unused-disable: warn

  array-func/prefer-array-from: off

  "@typescript-eslint/no-explicit-any": off
  "@typescript-eslint/no-non-null-assertion": off
  "@typescript-eslint/no-unnecessary-condition": off
  "@typescript-eslint/no-unused-expressions": warn
  "@typescript-eslint/default-param-last": warn
  "@typescript-eslint/dot-notation": warn
  "@typescript-eslint/brace-style": warn
  "@typescript-eslint/comma-dangle": warn
  "@typescript-eslint/comma-spacing": warn
  "@typescript-eslint/func-call-spacing": warn
  "@typescript-eslint/keyword-spacing": warn
  "@typescript-eslint/space-infix-ops": warn
  "@typescript-eslint/array-type": warn
  "@typescript-eslint/class-literal-property-style": warn
  "@typescript-eslint/consistent-indexed-object-style": warn
  "@typescript-eslint/consistent-type-assertions": warn
  "@typescript-eslint/member-ordering": warn
  "@typescript-eslint/method-signature-style": warn
  "@typescript-eslint/no-base-to-string": warn
  "@typescript-eslint/no-confusing-non-null-assertion": warn
  "@typescript-eslint/no-extraneous-class": warn
  "@typescript-eslint/no-invalid-void-type": warn
  "@typescript-eslint/no-meaningless-void-operator": warn
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": warn
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": warn
  "@typescript-eslint/no-unnecessary-qualifier": warn
  "@typescript-eslint/no-unnecessary-type-arguments": warn
  "@typescript-eslint/non-nullable-type-assertion-style": warn
  "@typescript-eslint/prefer-for-of": warn
  "@typescript-eslint/prefer-function-type": warn
  "@typescript-eslint/prefer-includes": warn
  "@typescript-eslint/prefer-literal-enum-member": warn
  "@typescript-eslint/prefer-readonly": warn
  "@typescript-eslint/prefer-reduce-type-parameter": warn
  "@typescript-eslint/prefer-regexp-exec": warn
  "@typescript-eslint/prefer-return-this-type": warn
  "@typescript-eslint/prefer-ts-expect-error": warn
  "@typescript-eslint/switch-exhaustiveness-check": warn
  "@typescript-eslint/type-annotation-spacing": warn
  "@typescript-eslint/unified-signatures": warn
  "@typescript-eslint/no-unused-vars": [ warn, args: none ]
  "@typescript-eslint/semi": [ warn, never ]
  "@typescript-eslint/object-curly-spacing": [ warn, always ]
  "@typescript-eslint/space-before-function-paren": [ warn, { anonymous: never, named: never, asyncArrow: always } ]
  "@typescript-eslint/consistent-type-definitions": [ warn, type ]
  "@typescript-eslint/consistent-type-exports": [ warn, fixMixedExportsWithInlineTypeSpecifier: false ]
  "@typescript-eslint/consistent-type-imports": [ warn, { prefer: no-type-imports, disallowTypeAnnotations: false } ]
  "@typescript-eslint/no-confusing-void-expression": [ warn, ignoreArrowShorthand: true ]
  "@typescript-eslint/no-empty-function": [ warn, allow: [ arrowFunctions ] ]
  "@typescript-eslint/require-array-sort-compare": [ warn, ignoreStringArrays: true ]
  "@typescript-eslint/lines-between-class-members": [ warn, allowSingleLine: true ]
  "@typescript-eslint/quotes": [ warn, double ]

  "@typescript-eslint/padding-line-between-statements":
  - warn
  - { blankLine: always, prev: "*", next: "*" }
  - { blankLine: never, prev: import, next: import }
  - { blankLine: any, prev: const, next: const }
  - { blankLine: never, prev: const, next: let }
  - { blankLine: always, prev: multiline-block-like, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-block-like }
  - { blankLine: always, prev: multiline-const, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-const }
  - { blankLine: always, prev: multiline-expression, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-expression }
  - { blankLine: always, prev: multiline-let, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-let }
  - { blankLine: always, prev: multiline-var, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-var }
  - { blankLine: any, prev: block-like, next: break }
  - { blankLine: any, prev: case, next: case }
  - { blankLine: never, prev: expression, next: expression }
  - { blankLine: never, prev: let, next: let }
  - { blankLine: always, prev: multiline-expression, next: "*" }
  - { blankLine: always, prev: "*", next: multiline-expression }
  - { blankLine: any, prev: export, next: export }
  - { blankLine: any, prev: type, next: type }

  "@typescript-eslint/member-delimiter-style":
  - warn
  - { multiline: { delimiter: none, requireLast: false }, singleline: { delimiter: comma, requireLast: false } }
